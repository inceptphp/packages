<?php

use PHPUnit\Framework\TestCase;

use Incept\Framework\Framework;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class System_Storm_System_Event_Schema_Test extends TestCase
{
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    //this is the OOP version of incept
    $this->object = new Framework;
    $testRoot = dirname(__DIR__);
    $packageRoot = dirname($testRoot);

    //create a PDO package like the README describes
    $this->object
      ->register('pdo')
      ->package('pdo')
      ->mapPackageMethods(include $testRoot . '/assets/mysql.php');

    //now register storm
    $this->object->register('inceptphp/incept-storm', $packageRoot);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   */
  public function testSystemCreate()
  {
    $incept = $this->object;
    $payload = $incept->makePayload();
    $payload['request']->setStage([
      'drop' => true,
      'table' => 'foo',
      'primary' => 'foo_id',
      'columns' => [
        'foo_title' => [
          'type' => 'varchar',
          'length' => 255,
          'required' => true,
          'index' => true
        ],
        'foo_slug' => [
          'type' => 'varchar',
          'length' => 255,
          'required' => true,
          'unique' => true
        ],
        'foo_detail' => [
          'type' => 'text',
          'null' => true
        ],
        'foo_amount' => [
          'type' => 'int',
          'length' => 5,
          'attribute' => 'unsigned',
          'default' => 0,
          'index' => true
        ]
      ]
    ]);

    $incept('event')->call(
      'storm-create',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());

    $table = $incept('storm')->getTables('foo');
    $this->assertTrue(!empty($table));
  }

  /**
   */
  public function testSystemAlter()
  {
    $incept = $this->object;
    $payload = $incept->makePayload();

    $payload['request']->setStage([
      'table' => 'foo',
      'columns' => [
        'foo_title' => [
          'type' => 'varchar',
          'length' => 254,
          'required' => true,
          'index' => true
        ],
        'foo_detail' => [
          'type' => 'text'
        ],
        'foo_amount' => [
          'type' => 'int',
          'length' => 6,
          'default' => 0,
          'index' => true
        ]
      ]
    ]);

    $incept('event')->call(
      'storm-alter',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
  }
}
